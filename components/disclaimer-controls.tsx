
'use client';

import { useState } from 'react';
import { DisclaimerSettings, DEFAULT_DISCLAIMER_SETTINGS } from '@/lib/types';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, Eye, EyeOff, FileText } from 'lucide-react';

interface DisclaimerControlsProps {
  settings: DisclaimerSettings;
  fullDisclaimer: string;
  onSettingsChange: (settings: DisclaimerSettings) => void;
  autoGeneratedSummary: string;
}

export function DisclaimerControls({
  settings,
  fullDisclaimer,
  onSettingsChange,
  autoGeneratedSummary
}: DisclaimerControlsProps) {
  const [showPreview, setShowPreview] = useState(false);

  const handleSettingChange = (field: keyof DisclaimerSettings, value: any) => {
    const updatedSettings = { ...settings, [field]: value };
    onSettingsChange(updatedSettings);
  };

  const getTruncatedText = () => {
    if (settings.displayMode === 'full') return fullDisclaimer;
    if (settings.displayMode === 'truncated' && !settings.autoGenerateSummary && settings.customTruncatedText) {
      return settings.customTruncatedText;
    }
    return autoGeneratedSummary;
  };

  return (
    <Card className="border-orange-200 bg-orange-50/50">
      <CardHeader className="pb-3">
        <CardTitle className="text-sm flex items-center gap-2">
          <span className="p-1 bg-orange-100 rounded">
            <FileText className="h-3 w-3 text-orange-600" />
          </span>
          Enhanced Disclaimer Management
          <Badge variant="secondary" className="text-xs">Phase 3</Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Display Mode Selection */}
        <div className="space-y-2">
          <Label>Display Mode</Label>
          <Select 
            value={settings.displayMode} 
            onValueChange={(value: 'truncated' | 'full' | 'auto') => handleSettingChange('displayMode', value)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="auto">
                <div className="flex flex-col">
                  <span className="font-medium">Auto (Recommended)</span>
                  <span className="text-xs text-gray-500">Intelligent truncation with toggle</span>
                </div>
              </SelectItem>
              <SelectItem value="truncated">
                <div className="flex flex-col">
                  <span className="font-medium">Always Truncated</span>
                  <span className="text-xs text-gray-500">Show summary only</span>
                </div>
              </SelectItem>
              <SelectItem value="full">
                <div className="flex flex-col">
                  <span className="font-medium">Always Full</span>
                  <span className="text-xs text-gray-500">Show complete disclaimer</span>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Toggle Controls */}
        {settings.displayMode !== 'full' && (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label htmlFor="showToggle" className="text-sm">Show "See Details" Toggle</Label>
              <Switch
                id="showToggle"
                checked={settings.showToggle}
                onCheckedChange={(checked) => handleSettingChange('showToggle', checked)}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <Label htmlFor="autoGenerate" className="text-sm">Auto-Generate Summary</Label>
              <Switch
                id="autoGenerate"
                checked={settings.autoGenerateSummary}
                onCheckedChange={(checked) => handleSettingChange('autoGenerateSummary', checked)}
              />
            </div>
          </div>
        )}

        {/* Custom Truncated Text */}
        {settings.displayMode !== 'full' && !settings.autoGenerateSummary && (
          <div className="space-y-2">
            <Label htmlFor="customTruncated">Custom Disclaimer Summary</Label>
            <Textarea
              id="customTruncated"
              placeholder="Enter custom disclaimer summary..."
              value={settings.customTruncatedText || ''}
              onChange={(e) => handleSettingChange('customTruncatedText', e.target.value)}
              rows={2}
              className="text-sm"
            />
            <div className="text-xs text-gray-500">
              {(settings.customTruncatedText || '').length} characters
            </div>
          </div>
        )}

        {/* Preview Toggle */}
        <div className="flex items-center justify-between pt-2 border-t">
          <Label className="text-sm font-medium">Preview Disclaimer Display</Label>
          <button
            onClick={() => setShowPreview(!showPreview)}
            className="flex items-center gap-2 text-xs text-blue-600 hover:text-blue-800"
          >
            {showPreview ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
            {showPreview ? 'Hide Preview' : 'Show Preview'}
          </button>
        </div>

        {/* Preview Display */}
        {showPreview && (
          <div className="space-y-3 p-3 bg-white border rounded-lg">
            <div className="text-xs font-medium text-gray-600 uppercase tracking-wide">
              Preview: {settings.displayMode === 'full' ? 'Full Disclaimer' : 'Truncated Display'}
            </div>
            
            {settings.displayMode === 'full' ? (
              <div className="text-xs text-gray-700 leading-relaxed">
                *{fullDisclaimer || 'Enter full disclaimer text to see preview...'}
              </div>
            ) : (
              <div className="space-y-2">
                <div className="text-xs text-gray-700">
                  *{getTruncatedText()}
                  {settings.showToggle && (
                    <span className="text-blue-600 underline cursor-pointer ml-1">
                      See Details
                    </span>
                  )}
                </div>
                {settings.showToggle && (
                  <div className="text-xs text-gray-500 pl-2 border-l-2 border-gray-200">
                    (Full disclaimer would appear here when clicked)
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Guidance */}
        <div className="flex items-start gap-2 p-3 bg-blue-50 rounded-lg">
          <AlertTriangle className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
          <div className="text-xs text-blue-800">
            <div className="font-medium mb-1">Disclaimer Best Practices:</div>
            <ul className="space-y-1 text-blue-700">
              <li>• Use "Auto" mode for best user experience</li>
              <li>• Auto-generated summaries extract key details like expiration dates</li>
              <li>• Custom summaries give you full control over messaging</li>
              <li>• Always include the full disclaimer for legal compliance</li>
            </ul>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
